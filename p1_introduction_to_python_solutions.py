# -*- coding: utf-8 -*-
"""P1_Introduction_to_Python_Solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dZ7s_oCSULSUHr5Rl6wkk10NAmyUw6EE

# Introduction to Python: Part 1

Welcome to the world of Python! 

In the AI & Machine Learning club, we will be using Python to code our projects! 

In this series of lessons, we will walk you through fundamental Python knowledge that will assist you with your projects.

## Your First Line of Python

Okay, let's get started with some programming! 

Click on the code block below, and a play button will appear on the left. Click on the play button to run the line of Python code.
"""

print("Hello world")

"""## Your First Variable

In programming, we use a concept called a **variable**. It's similar to what you have learned in math. Run the cell below:
"""

x = 10

"""When you run the cell above, you create a variable named `x` assigned with the value of 10. 

The next time you refer to `x` in your code, it will remember that it has been assigned 10. 

You will see lots of variables in the future!

## Printing

When a Python program is run, we will only see what we set to print to the screen. 

Notice that when we set `x = 10`, nothing was printed back out because we didn't print it.
"""

y = 20
print(y)

"""Let's practice! Add a line to the code block below to print the value of `z`."""

z = 35
### YOUR CODE HERE ### Don't forget to run your code when you're done :)
print(z)
# By the way, when you add a hashtag to the front of a line of code, this tells the program to treat that line as a comment
# Programmers leave comments on their code to leave helpful notes for themselves and communicate information to other programmers!

"""If we use multiple print commands, they will automatically print on separate lines."""

print("Hello!")
print("How are you doing?")

"""One thing that you will find useful is to be able to print out a message but also include the value of a variable in that message:"""

num_flowers = 5
print("I have", num_flowers, "flowers.")

"""Notice that spaces were added between "have", "5", and "flowers" when we used the commas.

In Python, there are many ways to format print statements. Another (advanced) way to format print statements is:
"""

num_flowers = 5
print("I have {} flowers.".format(num_flowers))

"""If this line of code seems confusing to you, don't worry! You will naturally understand this after we cover more Python concepts."""

num_books = 100
# Write a print statement below to say "I own 100 books.", using the variable num_books
### YOUR CODE HERE ### 
print("I own",num_books, "books.")

"""## Variable Naming Rules

Variables require the correct input of lowercase and uppercase letters. That means a variable named `thing` and one named `Thing` are different! Let's see what happes when we run code with this mistake:
"""

thing = 1
print(Thing)

"""This happens because we created a variable named `thing` but not one named `Thing`.

As you have seen in earlier examples, variables can have letters, numbers, and underscores in them. However, there are restrictions.

Run the following code blocks to see which ones raise errors:
"""

thing_2 = 5

thing-2 = 5

2_thing = 5

some_variable = 5

some variable = 5

"""From the above examples, you should notice:

*   You can only start a variable name with a letter or underscore (no numbers)
*   You cannot have a space in a variable name
*   You cannot use any special characters (such as`-` or `+`) or punctuation (such as `.` or `,`)

Finally, as you will see below, you also can't use "reserved keywords" as variable names. "Reserved keywords" are special words in Python that do specific things in your code. For example, one reserved keyword is `for`. Notice how it brings a syntax error below:
"""

for = 10

"""## Data Types

So far, we've only assigned numbers to our variables, but in Python, we can assign different types of of data to our variables.

For example:
"""

# We can assign text to a variable by using quotations or apostrophes
some_string = "Apples"
some_string_2 = 'Oranges'
print(some_string)
print(some_string_2)

# We can also assign numbers with decimal points to our variables
some_number = 13.45

# Another variable type is called a boolean, which can only hold the value of True or False
some_boolean = True

"""Okay, let's practice!"""

# Initialize your own variable below (give it any valid name) and assign it the value "Hello!". Then print it.
### YOUR CODE HERE ### 
fun_var = "Hello"
print(fun_var)
### END CODE HERE ###

"""## Math in Python

Python can also be used as a math calculator. In artificial intelligence, we will often deal with complex numbers and equations, so this is when a calculator comes handy! 

For example, if we were asked to multiply 23 and 45, we could type it right into Python:
"""

print(23*45)

"""What if we need to use this answer for future calculations? We can save it as a variable and use it later!"""

a = 23 * 45
b = 4
c = a * b
print(c)

"""### Math Operators

See how we do mathematical operations in Python below:
"""

addition = 7 + 3
subtraction = 18 - 7
multiplication = 12 * 3
division = 36 / 6
exponentiation = 3 ** 2

# Notice that if we run this cell block, there is no output (so we can't check our results)

# Add a print statement so you can check is the calculations come out as expected!

### YOUR CODE HERE ### 
print(addition)
print(subtraction)
print(multiplication)
print(division)
print(exponentiation)
### END CODE HERE ###

"""Additionally, a math operation you may have not have seen before is called **modulo**. It can be useful when programming and it returns the remainder after you divide.

For example:
"""

modulo = 33 % 10
print(modulo)

# When you divide 33 by 10, you get 3 with a remainder of 3
# The modulo (%) operator returns that 3

"""### Order of Operations and Parentheses

Order of operations and parentheses work the same way in Python as you would expect in math.
"""

some_number = (47 + 3) * 2 / 10
print(some_number)

"""However, an exception is that you cannot do multiplication by just having parentheses. See below for an example:"""

some_number_2 = 2 (5 + 5)

"""### An Arithmetic Shortcut

So far, we've only been initializing new variables. However, variables in Python can be updated to hold new values. For example:
"""

a = 10
print(a)
a = 20
print(a)

"""What if we wanted to add 10 to the value of `a`? """

a = 20
a += 10
print(a)
# What do you expect this to print?

"""Below is a longer example with other operations. What do you think the final value should be? Try to calculate it yourself before adding a print command to test your answer:"""

unknown = 5
unknown += 5
unknown -= 2
unknown *= 8
unknown /= 4
unknown %= 3

##ADD a print statement here
print(unknown)